#!/bin/sh

exit_msg() {
    (>&2 echo "$2")
    exit $1
}

get_service() {
    systemctl --type=service | grep openvpn-client@nordvpn | awk '{print $1}'
}

run_ping() {
    local -r remote=$(grep -E '^remote [0-9.]+ [0-9]+$' $1 | cut -d ' ' -f 2)
    if [ -z "$remote" ]
    then
        exit_msg 1 "No ip address in config file $1"
    fi
    local -r bin=$(which ping)
    test $? -eq 0 || echo "ping not found, please install iputils"
    local -r tmp_stdout=$(mktemp)
    if $bin -c 4 -A $remote > $tmp_stdout
    then
        tail -n 1 $tmp_stdout | cut -d / -f 5
        rm $tmp_stdout
        return
    else
        rm $tmp_stdout
        exit_msg 2 "Can't run ping. Check internet connection."
    fi
}

ensure_infos() {
    if ! which python 1>/dev/null 2>&1;
    then
        exit_msg 1 "python and pandas are required."
    fi
    declare -i force_update=0
    case "$1" in
        -f|--force)
            force_update=1
            shift
            ;;
    esac
    declare -r servers_filename=/tmp/nordvpn_servers.json
    if [ $force_update -eq 1 ] \
           || [ ! -f $servers_filename ] \
           || [ ! -z "$(find $servers_filename -mmin +15)" ]
    then
        >&2 echo "Updating servers list..."
        curl --silent -o $servers_filename https://api.nordvpn.com/server
    fi
    echo $servers_filename
    return
}


patch_config_file() {
    local -r f=$1
    local -r targetdir=$2

    sed 's/^auth-user-pass.*$/auth-user-pass \/etc\/openvpn\/client\/nordvpn\/credentials.conf/g' -i $f
    echo "" >> $f
    echo "script-security 2" >> $f
    echo "up /etc/openvpn/client/nordvpn/updown" >> $f
    echo "down /etc/openvpn/client/nordvpn/updown" >> $f
    install -D -m 444 $f $targetdir/conf/$(basename $f)
    local -a tok=($(basename $f | tr '.' ' '))
    ln -s $targetdir/conf/$(basename $f) $targetdir/../nordvpn_${tok[0]}_${tok[3]:0:3}.conf
}

update_files() {
    local -i force_update=0
    while [ $# -ne 0 ]
    do
        case "$1" in
            -f|--force)
                force_update=1
                shift
                ;;
            *)
                print_usage
                shift
                ;;
        esac
    done

    local remote_url=https://nordvpn.com/api/files/zipv2

    local targetdir=/etc/openvpn/client/nordvpn
    mkdir -p $targetdir

    # local etag_file=$targetdir/etag
    # local etag="$(curl -sIL $remote_url \
    #                  | grep etag \
    #                  | awk '{print $2}' \
    #                  | tr -d '[:space:]')"
    # if [ $force_update -eq 0 ] && [ -r $etag_file ] && [ "$etag" = "$(cat $etag_file)" ]; then
    #     echo "Current config is up to date."
    #     exit 0
    # fi

    local tmpdir=$(mktemp -d)
    cd $tmpdir

    echo "Downloading nordvpn config files..."
    curl -sSL -o nordvpn.zip  $remote_url || exit 1
    # if [ "$(md5sum nordvpn.zip | awk '{print $1}')" != "$etag" ]; then
    #     exit_msg 1 "md5sum(nordvpn.zip) != $etag"
    # fi
    mkdir conf
    if ! unzip -q nordvpn.zip -d conf
    then
        msg_exit 2 "unzip failed"
    fi

    echo "Patching and installing files..."
    test -f $targetdir/credentials.conf && cp $targetdir/credentials.conf .
    find /etc/openvpn/client -name 'nordvpn_*.conf' | xargs -r rm
    rm -rf $targetdir/conf && mkdir -p $targetdir/conf

    export -f patch_config_file
    find conf -name '*.ovpn' | xargs -P $(($(nproc --all)-1)) -n1 -I{} sh -c "patch_config_file {} $targetdir"

    local cred_file=$targetdir/credentials.conf
    if [ -f credentials.conf ]; then
        cp credentials.conf $cred_file
    else
        echo "login" > $cred_file
        echo "password" >> $cred_file
        chmod 400 $cred_file
        echo "Please update $cred_file"
    fi

    # echo "$etag" > $etag_file

    rm -rf $tmpdir
}

print_usage() {
    cat <<EOF
usage: $(basename $0) [options] command [args]

Available options:
    -v, --verbose
        Be verbose, show commands and variables.
    -h, --help
        Print this help and exit.

Available commands:
    list [server_name_pattern]
        List available servers.
    infos [options]
        List available servers with additional information such as current
        load and features.
        -f, --force
            Force download.
    best [options]
        Filter best servers based on current ping and load
        -r, --region [str]
            Can be passed multiple times to combine. [str] can be a regex or one of:
                all [default],
                eu, europe,
                na, northamerica,
                sa, southamerica,
                am, americas,
                ne, neareast,
                as, asia,
                oc, oceania,
        -R, --not-region, --notregion [str]
            NOT region with identical options to "region". Can be passed multiple times
        -l, --max-load, --maxload [int]
            Filter out servers with load above the threshold
        -p, --max-ping, --maxping [int]
            Filter out servers with ping above the threshold
        -n, --num [int]
            Number of best servers to return.
        -c, --ping-count, --pingcount [int]
            Number of times to ping each server for increased precision
        -k, --keyword [str]
            Keywords to filter by, such as "Skype", "Netflix". Can be passed multiple times
        -s, --sort [str]
            Sort returned servers by "ping" or "load". Defaults to "ping".
    ping server_name
        Show round trip latency.
    rank [server_name_pattern]
        Ping all servers matching pattern and rank them.
    status
        Show current systemd service status, if any.
    start [options] server_name
        Start systemd service for specified server.
        -t, --tcp
            Use TCP connection instead of UDP.
    stop|restart
        Stop or restart systemd service, if any.
    update [options]
        Download and install nordvpn config files.
        -f, --force
            Force download even if the configuration files have not changed.

For more details see nordvpn(8).
EOF
}

while [ $# -ne 0 ]
do
    case "$1" in
        -h|--help)
            print_usage
            exit 0
            ;;
        -v|--verbose)
            set -x
            shift
            ;;
        list|infos|ping|rank|status|start|stop|restart|update|best)
            command="$1"
            shift
            break
            ;;
        --)
            shift
            break
            ;;
        *)
            print_usage
            exit 1
            ;;
    esac
done

if [ -z $command ]
then
    print_usage
    exit 1
fi

if [ $(id -u) -ne 0 ] && [ $command != "status" ]
then
    exit_msg 1 "'nordvpn $command' requires super-user privileges."
fi

declare -r -i files_present=$(find /etc/openvpn/client -type f -name "*.nordvpn.com.*.ovpn" | wc -l)
declare -r -i up_to_date=1 #$(find /etc/openvpn/client/nordvpn -type f -name etag -mmin -$((2 * 24 * 60)) | wc -l)

if [ $files_present -eq 0 ] || ( [ $command != 'status' ] && [ $up_to_date -eq 0 ] )
then
    echo "No configuration files found or files too old. Updating now..."
    update_files -f
fi

case $command in
    list)
        find /etc/openvpn/client/ -type l -name "nordvpn_*${1}*.conf" \
            | xargs -L1 basename \
            | cut -d _ -f 2 \
            | cut -d . -f 1 \
            | sort -g
        ;;
    infos)
        servers_filename=$(ensure_infos "$@")
        if [ $? -ne 0 ]
        then
            exit 1
        fi
        python3 /etc/openvpn/client/nordvpn/servers.py $servers_filename
        ;;
    best)
        case "$1" in
            -h|--help)
            python /etc/openvpn/client/nordvpn/servers.py --help
            ;;
        *)
            servers_filename=$(ensure_infos "$1")
            if [ $? -ne 0 ]
            then
                exit 1
            fi
            python /etc/openvpn/client/nordvpn/servers.py $servers_filename --ranking "$@"
            ;;
        esac
        ;;
    ping)
        file="/etc/openvpn/client/nordvpn_${1}_udp.conf"
        if [ ! -f "$file" ]
        then
            exit_msg 1 "Can't find $file"
        fi
        run_ping $file
        ;;
    rank)
        files=$(find /etc/openvpn/client/ -type l -name "nordvpn_*${1}*_udp.conf" | cut -d _ -f 2)
        bin=$(which fping)
        test $? -eq 0 || echo "fping not found, please install"
        tmp_stdout=$(mktemp)
        $bin -c 4 -e -q $(echo $files | sed 's/$/.nordvpn.com/' | sed 's/ /.nordvpn.com /g') 2>$tmp_stdout > /dev/null
        awk '{split($0,names,"."); split($0,res,"/"); print names[1],"\t",res[8]}' $tmp_stdout | sort -n -k 2
        rm -f $tmp_stdout
        ;;
    status)
        service=$(get_service)
        test -z "$service" || systemctl status $service
        ;;
    start)
        conn_type='udp'
        case "$1" in
            -t|--tcp)
                conn_type='tcp'
                shift
                ;;
        esac
        service=$(get_service)
        updown=/etc/openvpn/client/nordvpn/updown
        test -z "$service" || $0 stop
        if [ -x /etc/openvpn/vpnfailsafe.sh ]; then
            ln -fs /etc/openvpn/vpnfailsafe.sh $updown
        else
            ln -fs /etc/openvpn/update-resolv-conf $updown
        fi
        if [ ! -f /etc/openvpn/client/nordvpn_${1}_${conn_type}.conf ]; then
            exit_msg 1 "${1} is not a valid nordvpn server. Exiting."
        fi
        systemctl $command openvpn-client@nordvpn_${1}_${conn_type}
        ;;
    stop|restart)
        service=$(get_service)
        if [[ $command = "stop" \
                 && $(readlink -f /etc/openvpn/client/nordvpn/updown) = "/etc/openvpn/vpnfailsafe.sh" ]]
        then
            test -z "$service" || systemctl $command $service
            case "$1" in
                -r|--reset)
                    source /usr/share/doc/vpnfailsafe/vpnfailsafe_reset.sh
                    break
            esac
        else
            test -z "$service" && exit_msg 1 "No openvpn connection exist."
            systemctl $command $service
        fi
        ;;
    update)
        update_files "$@"
        ;;
    *)
        print_usage
        exit 1
        ;;
esac
